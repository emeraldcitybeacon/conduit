services:
  web:
    profiles: ["dev"]
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./:/app
    env_file:
      - ./.env
    networks:
      - default
    ports:
      - 8004:8000
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG:-True}
      - DJANGO_LOG_LEVEL=${DJANGO_LOG_LEVEL:-INFO}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-conduit.settings.dev}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  web-prod:
    profiles: ["staging"]
    build:
      context: .
      dockerfile: Dockerfile
    command: gunicorn conduit.asgi:application -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000
    env_file:
      - ./.env
    environment:
      - DJANGO_SETTINGS_MODULE=conduit.settings.prod
      - SECRET_KEY=${SECRET_KEY}
      - DJANGO_LOG_LEVEL=${DJANGO_LOG_LEVEL:-INFO}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
    ports:
      - 8004:8000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  tailwind:
    profiles: ["dev"]
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: bash -c "npx @tailwindcss/cli --input assets/tailwind/input.css --config assets/tailwind/tailwind.config.js --output dist/css/site.css --watch"
    volumes:
      - ./:/app
      - /app/node_modules
    env_file:
      - ./.env
    depends_on:
      web:
        condition: service_started
    restart: unless-stopped
    tty: true
    stdin_open: true

  db:
    image: postgres:17-alpine
    env_file:
      - ./.env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7
    volumes:
      - redis-data:/data
    healthcheck: # Health check for Redis
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  pgadmin:
    profiles: ["dev"]
    image: dpage/pgadmin4:latest
    env_file:
      - ./.env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_LISTEN_PORT=80 # Ensure it listens on port 80 internally
    ports:
      - '5054:80'
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy # Ensure DB is ready before pgAdmin tries to connect
    restart: unless-stopped

volumes:
  db-data:
  redis-data:
  pgadmin-data:
